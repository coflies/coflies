package common

import (
	"io/ioutil"

	log "github.com/sirupsen/logrus"
	yaml "gopkg.in/yaml.v2"
)

type LanguageType string

// Language Type
const (
	COMPILER    LanguageType = "compiler"
	INTERPRETER LanguageType = "interpreter"
)

// LanguageData ...
type LanguageData struct {
	// Standard name of language. Ex: java, c, c++, golang, kotlin, python2, python3
	Name string
	// Implementation Version
	Version string
	// relative directory install path
	Path string
	// Execution name of exec binary. Ex: java
	ExecName string
	// Compile name of compile binary. Ex: javac
	CompilerName string `yaml:"compiler-name"`
	// Type: compiler (need compile then run) | interpreter (don't need compile)
	Type LanguageType
}

// ProjectData store properties of the coflies project
type ProjectData struct {
	Args []string
	// working space path, place the generated/provided code/test files are put,
	// includes project settings, ... necessaries files that need to run the test
	// cases
	Workspace string
	// using `manual` mean we will pass input data as file when run the solution
	// the solution file should not be generated by framework, but directly
	// provided by user then compiled and run
	// by the runner
	// [default] `auto` we will generate real file based on solution (usually
	// only function) provied and language template
	Type string
	// default environments of the project
	Env []string
}

// CodeData store code data of the coflies project
type CodeData struct{}

// TestData store test data of the coflies project
type TestData struct{}

// ResultData store result of the coflies project
type ResultData struct {
	Stdout string
	Stderr string
}

func MakeLanguage(projectPath string, name string, version string) LanguageData {
	yamlFile, err := ioutil.ReadFile(projectPath + "/config/" + name + "/" + version + "/language.yaml")
	if err != nil {
		// error
		yamlFile, _ = ioutil.ReadFile("projects/" + name + "/" + version + "/language.yaml")
	}
	l := LanguageData{
		Name:    name,
		Version: version,
	}
	err = yaml.Unmarshal(yamlFile, &l)
	if err != nil {
		log.Fatalf("Unmarshal: %v", err)
	}
	return l
}
